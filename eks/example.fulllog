➜  eks git:(main) ✗ terraform apply  
module.eks.data.aws_caller_identity.current: Reading...
module.eks.module.eks_managed_node_group["uno"].data.aws_partition.current: Reading...
module.eks.module.eks_managed_node_group["uno"].data.aws_partition.current: Read complete after 0s [id=aws]
module.eks.module.eks_managed_node_group["uno"].data.aws_caller_identity.current: Reading...
module.eks.module.kms.data.aws_partition.current: Reading...
module.eks.module.kms.data.aws_caller_identity.current: Reading...
module.db.module.db_instance.data.aws_partition.current: Reading...
module.eks.module.kms.data.aws_partition.current: Read complete after 0s [id=aws]
module.eks.data.aws_partition.current: Reading...
module.db.module.db_instance.data.aws_partition.current: Read complete after 0s [id=aws]
module.eks.data.aws_partition.current: Read complete after 0s [id=aws]
module.db.module.db_instance.data.aws_iam_policy_document.enhanced_monitoring: Reading...
module.eks.module.eks_managed_node_group["uno"].data.aws_iam_policy_document.assume_role_policy[0]: Reading...
module.eks.data.aws_iam_policy_document.assume_role_policy[0]: Reading...
module.db.module.db_instance.data.aws_iam_policy_document.enhanced_monitoring: Read complete after 0s [id=1813475199]
module.eks.data.aws_iam_policy_document.assume_role_policy[0]: Read complete after 0s [id=2764486067]
module.eks.module.eks_managed_node_group["uno"].data.aws_iam_policy_document.assume_role_policy[0]: Read complete after 0s [id=2560088296]
module.eks.module.kms.data.aws_caller_identity.current: Read complete after 2s [id=154977180039]
module.eks.module.eks_managed_node_group["uno"].data.aws_caller_identity.current: Read complete after 2s [id=154977180039]
module.eks.data.aws_caller_identity.current: Read complete after 2s [id=154977180039]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create
 <= read (data resources)

Terraform will perform the following actions:

  # aws_security_group.eks will be created
  + resource "aws_security_group" "eks" {
      + arn                    = (known after apply)
      + description            = "Allow HTTP & HTTPS traffic in"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "HTTP access from the world"
              + from_port        = 80
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 80
            },
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "HTTPS access from the world"
              + from_port        = 443
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 443
            },
          + {
              + cidr_blocks      = [
                  + "52.30.97.44/32",
                  + "34.242.244.172/32",
                  + "115.70.103.228/32",
                ]
              + description      = "SSH access from bastion host"
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
            },
        ]
      + name                   = "terraform-eks-eks-sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Environment" = "internal"
          + "Name"        = "terraform-eks"
          + "deployment"  = "terraform"
          + "type"        = "internal"
        }
      + tags_all               = {
          + "Environment" = "internal"
          + "Name"        = "terraform-eks"
          + "deployment"  = "terraform"
          + "type"        = "internal"
        }
      + vpc_id                 = (known after apply)
    }

  # aws_security_group.eks-nodes will be created
  + resource "aws_security_group" "eks-nodes" {
      + arn                    = (known after apply)
      + description            = "Allow HTTP & HTTPS traffic in"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "HTTPS access from the world"
              + from_port        = 443
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 443
            },
          + {
              + cidr_blocks      = [
                  + "52.30.97.44/32",
                  + "34.242.244.172/32",
                  + "115.70.103.228/32",
                ]
              + description      = "HTTP access from the world"
              + from_port        = 31000
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 33000
            },
          + {
              + cidr_blocks      = [
                  + "52.30.97.44/32",
                  + "34.242.244.172/32",
                  + "115.70.103.228/32",
                ]
              + description      = "HTTP access from the world"
              + from_port        = 8080
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 8080
            },
          + {
              + cidr_blocks      = [
                  + "52.30.97.44/32",
                  + "34.242.244.172/32",
                  + "115.70.103.228/32",
                ]
              + description      = "HTTP access from the world"
              + from_port        = 80
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 80
            },
          + {
              + cidr_blocks      = [
                  + "52.30.97.44/32",
                  + "34.242.244.172/32",
                  + "115.70.103.228/32",
                ]
              + description      = "SSH access from bastion host"
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
            },
        ]
      + name                   = "terraform-eks-eks-nodes-sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Environment" = "internal"
          + "Name"        = "terraform-eks"
          + "deployment"  = "terraform"
          + "type"        = "internal"
        }
      + tags_all               = {
          + "Environment" = "internal"
          + "Name"        = "terraform-eks"
          + "deployment"  = "terraform"
          + "type"        = "internal"
        }
      + vpc_id                 = (known after apply)
    }

  # aws_security_group.rds will be created
  + resource "aws_security_group" "rds" {
      + arn                    = (known after apply)
      + description            = "Allow access to RDS database"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "PSQL access from worker nodes"
              + from_port        = 5432
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 5432
            },
        ]
      + name                   = "terraform-eks-rds-sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "terraform-eks-rds-sg"
          + "type" = "internal"
        }
      + tags_all               = {
          + "Name" = "terraform-eks-rds-sg"
          + "type" = "internal"
        }
      + vpc_id                 = (known after apply)
    }

  # module.eks.data.tls_certificate.this[0] will be read during apply
  # (config refers to values not yet known)
 <= data "tls_certificate" "this" {
      + certificates = (known after apply)
      + id           = (known after apply)
      + url          = (known after apply)
    }

  # module.eks.aws_cloudwatch_log_group.this[0] will be created
  + resource "aws_cloudwatch_log_group" "this" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + name              = "/aws/eks/terraform-eks-cluster/cluster"
      + retention_in_days = 90
      + tags              = {
          + "Environment" = "internal"
          + "Name"        = "terraform-eks"
          + "deployment"  = "terraform"
          + "type"        = "internal"
        }
      + tags_all          = {
          + "Environment" = "internal"
          + "Name"        = "terraform-eks"
          + "deployment"  = "terraform"
          + "type"        = "internal"
        }
    }

  # module.eks.aws_ec2_tag.cluster_primary_security_group["Environment"] will be created
  + resource "aws_ec2_tag" "cluster_primary_security_group" {
      + id          = (known after apply)
      + key         = "Environment"
      + resource_id = (known after apply)
      + value       = "internal"
    }

  # module.eks.aws_ec2_tag.cluster_primary_security_group["deployment"] will be created
  + resource "aws_ec2_tag" "cluster_primary_security_group" {
      + id          = (known after apply)
      + key         = "deployment"
      + resource_id = (known after apply)
      + value       = "terraform"
    }

  # module.eks.aws_ec2_tag.cluster_primary_security_group["type"] will be created
  + resource "aws_ec2_tag" "cluster_primary_security_group" {
      + id          = (known after apply)
      + key         = "type"
      + resource_id = (known after apply)
      + value       = "internal"
    }

  # module.eks.aws_eks_addon.this["coredns"] will be created
  + resource "aws_eks_addon" "this" {
      + addon_name        = "coredns"
      + addon_version     = (known after apply)
      + arn               = (known after apply)
      + cluster_name      = "terraform-eks-cluster"
      + created_at        = (known after apply)
      + id                = (known after apply)
      + modified_at       = (known after apply)
      + resolve_conflicts = "OVERWRITE"
      + tags              = {
          + "Environment" = "internal"
          + "Name"        = "terraform-eks"
          + "deployment"  = "terraform"
          + "type"        = "internal"
        }
      + tags_all          = {
          + "Environment" = "internal"
          + "Name"        = "terraform-eks"
          + "deployment"  = "terraform"
          + "type"        = "internal"
        }
    }

  # module.eks.aws_eks_addon.this["kube-proxy"] will be created
  + resource "aws_eks_addon" "this" {
      + addon_name    = "kube-proxy"
      + addon_version = (known after apply)
      + arn           = (known after apply)
      + cluster_name  = "terraform-eks-cluster"
      + created_at    = (known after apply)
      + id            = (known after apply)
      + modified_at   = (known after apply)
      + tags          = {
          + "Environment" = "internal"
          + "Name"        = "terraform-eks"
          + "deployment"  = "terraform"
          + "type"        = "internal"
        }
      + tags_all      = {
          + "Environment" = "internal"
          + "Name"        = "terraform-eks"
          + "deployment"  = "terraform"
          + "type"        = "internal"
        }
    }

  # module.eks.aws_eks_addon.this["vpc-cni"] will be created
  + resource "aws_eks_addon" "this" {
      + addon_name        = "vpc-cni"
      + addon_version     = (known after apply)
      + arn               = (known after apply)
      + cluster_name      = "terraform-eks-cluster"
      + created_at        = (known after apply)
      + id                = (known after apply)
      + modified_at       = (known after apply)
      + resolve_conflicts = "OVERWRITE"
      + tags              = {
          + "Environment" = "internal"
          + "Name"        = "terraform-eks"
          + "deployment"  = "terraform"
          + "type"        = "internal"
        }
      + tags_all          = {
          + "Environment" = "internal"
          + "Name"        = "terraform-eks"
          + "deployment"  = "terraform"
          + "type"        = "internal"
        }
    }

  # module.eks.aws_eks_cluster.this[0] will be created
  + resource "aws_eks_cluster" "this" {
      + arn                       = (known after apply)
      + certificate_authority     = (known after apply)
      + created_at                = (known after apply)
      + enabled_cluster_log_types = [
          + "api",
          + "audit",
          + "authenticator",
        ]
      + endpoint                  = (known after apply)
      + id                        = (known after apply)
      + identity                  = (known after apply)
      + name                      = "terraform-eks-cluster"
      + platform_version          = (known after apply)
      + role_arn                  = (known after apply)
      + status                    = (known after apply)
      + tags                      = {
          + "Environment" = "internal"
          + "Name"        = "terraform-eks"
          + "deployment"  = "terraform"
          + "type"        = "internal"
        }
      + tags_all                  = {
          + "Environment" = "internal"
          + "Name"        = "terraform-eks"
          + "deployment"  = "terraform"
          + "type"        = "internal"
        }
      + version                   = "1.22"

      + kubernetes_network_config {
          + ip_family         = (known after apply)
          + service_ipv4_cidr = (known after apply)
        }

      + timeouts {}

      + vpc_config {
          + cluster_security_group_id = (known after apply)
          + endpoint_private_access   = true
          + endpoint_public_access    = true
          + public_access_cidrs       = [
              + "0.0.0.0/0",
            ]
          + security_group_ids        = (known after apply)
          + subnet_ids                = (known after apply)
          + vpc_id                    = (known after apply)
        }
    }

  # module.eks.aws_iam_openid_connect_provider.oidc_provider[0] will be created
  + resource "aws_iam_openid_connect_provider" "oidc_provider" {
      + arn             = (known after apply)
      + client_id_list  = [
          + "sts.amazonaws.com",
        ]
      + id              = (known after apply)
      + tags            = {
          + "Environment" = "internal"
          + "Name"        = "terraform-eks"
          + "deployment"  = "terraform"
          + "type"        = "internal"
        }
      + tags_all        = {
          + "Environment" = "internal"
          + "Name"        = "terraform-eks"
          + "deployment"  = "terraform"
          + "type"        = "internal"
        }
      + thumbprint_list = (known after apply)
      + url             = (known after apply)
    }

  # module.eks.aws_iam_role.this[0] will be created
  + resource "aws_iam_role" "this" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "eks.amazonaws.com"
                        }
                      + Sid       = "EKSClusterAssumeRole"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = true
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = (known after apply)
      + name_prefix           = "terraform-eks-cluster-cluster-"
      + path                  = "/"
      + tags                  = {
          + "Environment" = "internal"
          + "Name"        = "terraform-eks"
          + "deployment"  = "terraform"
          + "type"        = "internal"
        }
      + tags_all              = {
          + "Environment" = "internal"
          + "Name"        = "terraform-eks"
          + "deployment"  = "terraform"
          + "type"        = "internal"
        }
      + unique_id             = (known after apply)

      + inline_policy {
          + name   = "terraform-eks-cluster-cluster"
          + policy = (known after apply)
        }
    }

  # module.eks.aws_iam_role_policy_attachment.this["arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"] will be created
  + resource "aws_iam_role_policy_attachment" "this" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
      + role       = (known after apply)
    }

  # module.eks.aws_iam_role_policy_attachment.this["arn:aws:iam::aws:policy/AmazonEKSVPCResourceController"] will be created
  + resource "aws_iam_role_policy_attachment" "this" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKSVPCResourceController"
      + role       = (known after apply)
    }

  # module.eks.aws_security_group.cluster[0] will be created
  + resource "aws_security_group" "cluster" {
      + arn                    = (known after apply)
      + description            = "EKS cluster security group"
      + egress                 = (known after apply)
      + id                     = (known after apply)
      + ingress                = (known after apply)
      + name                   = (known after apply)
      + name_prefix            = "terraform-eks-cluster-cluster-"
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Environment" = "internal"
          + "Name"        = "terraform-eks-cluster-cluster"
          + "deployment"  = "terraform"
          + "type"        = "internal"
        }
      + tags_all               = {
          + "Environment" = "internal"
          + "Name"        = "terraform-eks-cluster-cluster"
          + "deployment"  = "terraform"
          + "type"        = "internal"
        }
      + vpc_id                 = (known after apply)
    }

  # module.eks.aws_security_group.node[0] will be created
  + resource "aws_security_group" "node" {
      + arn                    = (known after apply)
      + description            = "EKS node shared security group"
      + egress                 = (known after apply)
      + id                     = (known after apply)
      + ingress                = (known after apply)
      + name                   = (known after apply)
      + name_prefix            = "terraform-eks-cluster-node-"
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Environment"                                 = "internal"
          + "Name"                                        = "terraform-eks-cluster-node"
          + "deployment"                                  = "terraform"
          + "kubernetes.io/cluster/terraform-eks-cluster" = "owned"
          + "type"                                        = "internal"
        }
      + tags_all               = {
          + "Environment"                                 = "internal"
          + "Name"                                        = "terraform-eks-cluster-node"
          + "deployment"                                  = "terraform"
          + "kubernetes.io/cluster/terraform-eks-cluster" = "owned"
          + "type"                                        = "internal"
        }
      + vpc_id                 = (known after apply)
    }

  # module.eks.aws_security_group_rule.cluster["egress_nodes_443"] will be created
  + resource "aws_security_group_rule" "cluster" {
      + description              = "Cluster API to node groups"
      + from_port                = 443
      + id                       = (known after apply)
      + prefix_list_ids          = []
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 443
      + type                     = "egress"
    }

  # module.eks.aws_security_group_rule.cluster["egress_nodes_kubelet"] will be created
  + resource "aws_security_group_rule" "cluster" {
      + description              = "Cluster API to node kubelets"
      + from_port                = 10250
      + id                       = (known after apply)
      + prefix_list_ids          = []
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 10250
      + type                     = "egress"
    }

  # module.eks.aws_security_group_rule.cluster["ingress_nodes_443"] will be created
  + resource "aws_security_group_rule" "cluster" {
      + description              = "Node groups to cluster API"
      + from_port                = 443
      + id                       = (known after apply)
      + prefix_list_ids          = []
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 443
      + type                     = "ingress"
    }

  # module.eks.aws_security_group_rule.node["egress_cluster_443"] will be created
  + resource "aws_security_group_rule" "node" {
      + description              = "Node groups to cluster API"
      + from_port                = 443
      + id                       = (known after apply)
      + prefix_list_ids          = []
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 443
      + type                     = "egress"
    }

  # module.eks.aws_security_group_rule.node["egress_https"] will be created
  + resource "aws_security_group_rule" "node" {
      + cidr_blocks              = [
          + "0.0.0.0/0",
        ]
      + description              = "Egress all HTTPS to internet"
      + from_port                = 443
      + id                       = (known after apply)
      + prefix_list_ids          = []
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 443
      + type                     = "egress"
    }

  # module.eks.aws_security_group_rule.node["egress_ntp_tcp"] will be created
  + resource "aws_security_group_rule" "node" {
      + cidr_blocks              = [
          + "0.0.0.0/0",
        ]
      + description              = "Egress NTP/TCP to internet"
      + from_port                = 123
      + id                       = (known after apply)
      + prefix_list_ids          = []
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 123
      + type                     = "egress"
    }

  # module.eks.aws_security_group_rule.node["egress_ntp_udp"] will be created
  + resource "aws_security_group_rule" "node" {
      + cidr_blocks              = [
          + "0.0.0.0/0",
        ]
      + description              = "Egress NTP/UDP to internet"
      + from_port                = 123
      + id                       = (known after apply)
      + prefix_list_ids          = []
      + protocol                 = "udp"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 123
      + type                     = "egress"
    }

  # module.eks.aws_security_group_rule.node["egress_self_coredns_tcp"] will be created
  + resource "aws_security_group_rule" "node" {
      + description              = "Node to node CoreDNS"
      + from_port                = 53
      + id                       = (known after apply)
      + prefix_list_ids          = []
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + self                     = true
      + source_security_group_id = (known after apply)
      + to_port                  = 53
      + type                     = "egress"
    }

  # module.eks.aws_security_group_rule.node["egress_self_coredns_udp"] will be created
  + resource "aws_security_group_rule" "node" {
      + description              = "Node to node CoreDNS"
      + from_port                = 53
      + id                       = (known after apply)
      + prefix_list_ids          = []
      + protocol                 = "udp"
      + security_group_id        = (known after apply)
      + self                     = true
      + source_security_group_id = (known after apply)
      + to_port                  = 53
      + type                     = "egress"
    }

  # module.eks.aws_security_group_rule.node["ingress_cluster_443"] will be created
  + resource "aws_security_group_rule" "node" {
      + description              = "Cluster API to node groups"
      + from_port                = 443
      + id                       = (known after apply)
      + prefix_list_ids          = []
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 443
      + type                     = "ingress"
    }

  # module.eks.aws_security_group_rule.node["ingress_cluster_kubelet"] will be created
  + resource "aws_security_group_rule" "node" {
      + description              = "Cluster API to node kubelets"
      + from_port                = 10250
      + id                       = (known after apply)
      + prefix_list_ids          = []
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 10250
      + type                     = "ingress"
    }

  # module.eks.aws_security_group_rule.node["ingress_self_coredns_tcp"] will be created
  + resource "aws_security_group_rule" "node" {
      + description              = "Node to node CoreDNS"
      + from_port                = 53
      + id                       = (known after apply)
      + prefix_list_ids          = []
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + self                     = true
      + source_security_group_id = (known after apply)
      + to_port                  = 53
      + type                     = "ingress"
    }

  # module.eks.aws_security_group_rule.node["ingress_self_coredns_udp"] will be created
  + resource "aws_security_group_rule" "node" {
      + description              = "Node to node CoreDNS"
      + from_port                = 53
      + id                       = (known after apply)
      + prefix_list_ids          = []
      + protocol                 = "udp"
      + security_group_id        = (known after apply)
      + self                     = true
      + source_security_group_id = (known after apply)
      + to_port                  = 53
      + type                     = "ingress"
    }

  # module.vpc.aws_db_subnet_group.database[0] will be created
  + resource "aws_db_subnet_group" "database" {
      + arn         = (known after apply)
      + description = "Database subnet group for terraform-eks-vpc"
      + id          = (known after apply)
      + name        = "terraform-eks-vpc"
      + name_prefix = (known after apply)
      + subnet_ids  = (known after apply)
      + tags        = {
          + "Environment" = "internal"
          + "Name"        = "terraform-eks-vpc"
          + "deployment"  = "terraform"
          + "type"        = "internal"
        }
      + tags_all    = {
          + "Environment" = "internal"
          + "Name"        = "terraform-eks-vpc"
          + "deployment"  = "terraform"
          + "type"        = "internal"
        }
    }

  # module.vpc.aws_internet_gateway.this[0] will be created
  + resource "aws_internet_gateway" "this" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags     = {
          + "Environment" = "internal"
          + "Name"        = "terraform-eks-vpc"
          + "deployment"  = "terraform"
          + "type"        = "internal"
        }
      + tags_all = {
          + "Environment" = "internal"
          + "Name"        = "terraform-eks-vpc"
          + "deployment"  = "terraform"
          + "type"        = "internal"
        }
      + vpc_id   = (known after apply)
    }

  # module.vpc.aws_route.public_internet_gateway[0] will be created
  + resource "aws_route" "public_internet_gateway" {
      + destination_cidr_block = "0.0.0.0/0"
      + gateway_id             = (known after apply)
      + id                     = (known after apply)
      + instance_id            = (known after apply)
      + instance_owner_id      = (known after apply)
      + network_interface_id   = (known after apply)
      + origin                 = (known after apply)
      + route_table_id         = (known after apply)
      + state                  = (known after apply)

      + timeouts {
          + create = "5m"
        }
    }

  # module.vpc.aws_route_table.private[0] will be created
  + resource "aws_route_table" "private" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = (known after apply)
      + tags             = {
          + "Environment" = "internal"
          + "Name"        = "terraform-eks-vpc-private-ap-southeast-2a"
          + "deployment"  = "terraform"
          + "type"        = "internal"
        }
      + tags_all         = {
          + "Environment" = "internal"
          + "Name"        = "terraform-eks-vpc-private-ap-southeast-2a"
          + "deployment"  = "terraform"
          + "type"        = "internal"
        }
      + vpc_id           = (known after apply)
    }

  # module.vpc.aws_route_table.private[1] will be created
  + resource "aws_route_table" "private" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = (known after apply)
      + tags             = {
          + "Environment" = "internal"
          + "Name"        = "terraform-eks-vpc-private-ap-southeast-2b"
          + "deployment"  = "terraform"
          + "type"        = "internal"
        }
      + tags_all         = {
          + "Environment" = "internal"
          + "Name"        = "terraform-eks-vpc-private-ap-southeast-2b"
          + "deployment"  = "terraform"
          + "type"        = "internal"
        }
      + vpc_id           = (known after apply)
    }

  # module.vpc.aws_route_table.public[0] will be created
  + resource "aws_route_table" "public" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = (known after apply)
      + tags             = {
          + "Environment" = "internal"
          + "Name"        = "terraform-eks-vpc-public"
          + "deployment"  = "terraform"
          + "type"        = "internal"
        }
      + tags_all         = {
          + "Environment" = "internal"
          + "Name"        = "terraform-eks-vpc-public"
          + "deployment"  = "terraform"
          + "type"        = "internal"
        }
      + vpc_id           = (known after apply)
    }

  # module.vpc.aws_route_table_association.database[0] will be created
  + resource "aws_route_table_association" "database" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_route_table_association.database[1] will be created
  + resource "aws_route_table_association" "database" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_route_table_association.public[0] will be created
  + resource "aws_route_table_association" "public" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_route_table_association.public[1] will be created
  + resource "aws_route_table_association" "public" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_subnet.database[0] will be created
  + resource "aws_subnet" "database" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "ap-southeast-2a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.30.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Environment" = "internal"
          + "Name"        = "terraform-eks-vpc-db-ap-southeast-2a"
          + "deployment"  = "terraform"
          + "type"        = "internal"
        }
      + tags_all                                       = {
          + "Environment" = "internal"
          + "Name"        = "terraform-eks-vpc-db-ap-southeast-2a"
          + "deployment"  = "terraform"
          + "type"        = "internal"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.vpc.aws_subnet.database[1] will be created
  + resource "aws_subnet" "database" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "ap-southeast-2b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.31.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Environment" = "internal"
          + "Name"        = "terraform-eks-vpc-db-ap-southeast-2b"
          + "deployment"  = "terraform"
          + "type"        = "internal"
        }
      + tags_all                                       = {
          + "Environment" = "internal"
          + "Name"        = "terraform-eks-vpc-db-ap-southeast-2b"
          + "deployment"  = "terraform"
          + "type"        = "internal"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.vpc.aws_subnet.public[0] will be created
  + resource "aws_subnet" "public" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "ap-southeast-2a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.10.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = true
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Environment" = "internal"
          + "Name"        = "terraform-eks-vpc-public-ap-southeast-2a"
          + "deployment"  = "terraform"
          + "type"        = "internal"
        }
      + tags_all                                       = {
          + "Environment" = "internal"
          + "Name"        = "terraform-eks-vpc-public-ap-southeast-2a"
          + "deployment"  = "terraform"
          + "type"        = "internal"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.vpc.aws_subnet.public[1] will be created
  + resource "aws_subnet" "public" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "ap-southeast-2b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.11.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = true
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Environment" = "internal"
          + "Name"        = "terraform-eks-vpc-public-ap-southeast-2b"
          + "deployment"  = "terraform"
          + "type"        = "internal"
        }
      + tags_all                                       = {
          + "Environment" = "internal"
          + "Name"        = "terraform-eks-vpc-public-ap-southeast-2b"
          + "deployment"  = "terraform"
          + "type"        = "internal"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.vpc.aws_vpc.this[0] will be created
  + resource "aws_vpc" "this" {
      + arn                                  = (known after apply)
      + assign_generated_ipv6_cidr_block     = false
      + cidr_block                           = "10.0.0.0/16"
      + default_network_acl_id               = (known after apply)
      + default_route_table_id               = (known after apply)
      + default_security_group_id            = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_classiclink                   = (known after apply)
      + enable_classiclink_dns_support       = (known after apply)
      + enable_dns_hostnames                 = true
      + enable_dns_support                   = true
      + id                                   = (known after apply)
      + instance_tenancy                     = "default"
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + tags                                 = {
          + "Environment" = "internal"
          + "Name"        = "terraform-eks-vpc"
          + "deployment"  = "terraform"
          + "type"        = "internal"
        }
      + tags_all                             = {
          + "Environment" = "internal"
          + "Name"        = "terraform-eks-vpc"
          + "deployment"  = "terraform"
          + "type"        = "internal"
        }
    }

  # module.db.module.db_instance.aws_db_instance.this[0] will be created
  + resource "aws_db_instance" "this" {
      + address                               = (known after apply)
      + allocated_storage                     = 16
      + allow_major_version_upgrade           = false
      + apply_immediately                     = false
      + arn                                   = (known after apply)
      + auto_minor_version_upgrade            = false
      + availability_zone                     = (known after apply)
      + backup_retention_period               = 7
      + backup_window                         = (known after apply)
      + ca_cert_identifier                    = (known after apply)
      + character_set_name                    = (known after apply)
      + copy_tags_to_snapshot                 = false
      + db_name                               = "iriusprod"
      + db_subnet_group_name                  = (known after apply)
      + delete_automated_backups              = true
      + deletion_protection                   = false
      + endpoint                              = (known after apply)
      + engine                                = "postgres"
      + engine_version                        = "11.15"
      + engine_version_actual                 = (known after apply)
      + hosted_zone_id                        = (known after apply)
      + iam_database_authentication_enabled   = false
      + id                                    = (known after apply)
      + identifier                            = "iii-k8s-terraform-eks-rds"
      + identifier_prefix                     = (known after apply)
      + instance_class                        = "db.t3.large"
      + iops                                  = 0
      + kms_key_id                            = (known after apply)
      + latest_restorable_time                = (known after apply)
      + license_model                         = (known after apply)
      + maintenance_window                    = (known after apply)
      + max_allocated_storage                 = 512
      + monitoring_interval                   = 0
      + monitoring_role_arn                   = (known after apply)
      + multi_az                              = false
      + name                                  = (known after apply)
      + nchar_character_set_name              = (known after apply)
      + option_group_name                     = (known after apply)
      + parameter_group_name                  = (known after apply)
      + password                              = (sensitive value)
      + performance_insights_enabled          = false
      + performance_insights_kms_key_id       = (known after apply)
      + performance_insights_retention_period = (known after apply)
      + port                                  = (known after apply)
      + publicly_accessible                   = false
      + replica_mode                          = (known after apply)
      + replicas                              = (known after apply)
      + resource_id                           = (known after apply)
      + skip_final_snapshot                   = true
      + snapshot_identifier                   = (known after apply)
      + status                                = (known after apply)
      + storage_encrypted                     = false
      + storage_type                          = (known after apply)
      + tags                                  = {
          + "Name" = "iii-k8s-terraform-eks-rds"
          + "type" = "internal"
        }
      + tags_all                              = {
          + "Name" = "iii-k8s-terraform-eks-rds"
          + "type" = "internal"
        }
      + timezone                              = (known after apply)
      + username                              = "iriusprod"
      + vpc_security_group_ids                = (known after apply)

      + timeouts {}
    }

  # module.db.module.db_parameter_group.aws_db_parameter_group.this[0] will be created
  + resource "aws_db_parameter_group" "this" {
      + arn         = (known after apply)
      + description = "terraform-eks-postgres11-ssl parameter group"
      + family      = "postgres11"
      + id          = (known after apply)
      + name        = (known after apply)
      + name_prefix = "terraform-eks-postgres11-ssl-"
      + tags        = {
          + "Name" = "terraform-eks-postgres11-ssl"
          + "type" = "internal"
        }
      + tags_all    = {
          + "Name" = "terraform-eks-postgres11-ssl"
          + "type" = "internal"
        }

      + parameter {
          + apply_method = "immediate"
          + name         = "rds.force_ssl"
          + value        = "1"
        }
    }

  # module.db.module.db_subnet_group.aws_db_subnet_group.this[0] will be created
  + resource "aws_db_subnet_group" "this" {
      + arn         = (known after apply)
      + description = "Subnets for manual RDS"
      + id          = (known after apply)
      + name        = (known after apply)
      + name_prefix = "terraform-eks-rds-subnets-"
      + subnet_ids  = (known after apply)
      + tags        = {
          + "Name" = "terraform-eks-rds-subnets"
          + "type" = "internal"
        }
      + tags_all    = {
          + "Name" = "terraform-eks-rds-subnets"
          + "type" = "internal"
        }
    }

  # module.eks.module.eks_managed_node_group["uno"].aws_eks_node_group.this[0] will be created
  + resource "aws_eks_node_group" "this" {
      + ami_type               = (known after apply)
      + arn                    = (known after apply)
      + capacity_type          = "SPOT"
      + cluster_name           = "terraform-eks-cluster"
      + disk_size              = 20
      + id                     = (known after apply)
      + instance_types         = [
          + "t3a.medium",
        ]
      + node_group_name        = (known after apply)
      + node_group_name_prefix = "uno-"
      + node_role_arn          = (known after apply)
      + release_version        = (known after apply)
      + resources              = (known after apply)
      + status                 = (known after apply)
      + subnet_ids             = (known after apply)
      + tags                   = {
          + "Environment" = "internal"
          + "Name"        = "uno"
          + "deployment"  = "terraform"
          + "type"        = "internal"
        }
      + tags_all               = {
          + "Environment" = "internal"
          + "Name"        = "uno"
          + "deployment"  = "terraform"
          + "type"        = "internal"
        }
      + version                = "1.22"

      + remote_access {
          + ec2_ssh_key = "iiiAPSE2"
        }

      + scaling_config {
          + desired_size = 1
          + max_size     = 2
          + min_size     = 1
        }

      + timeouts {}

      + update_config {
          + max_unavailable            = (known after apply)
          + max_unavailable_percentage = (known after apply)
        }
    }

  # module.eks.module.eks_managed_node_group["uno"].aws_iam_role.this[0] will be created
  + resource "aws_iam_role" "this" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "ec2.amazonaws.com"
                        }
                      + Sid       = "EKSNodeAssumeRole"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + description           = "EKS managed node group IAM role"
      + force_detach_policies = true
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = (known after apply)
      + name_prefix           = "uno-eks-node-group-"
      + path                  = "/"
      + tags                  = {
          + "Environment" = "internal"
          + "Name"        = "terraform-eks"
          + "deployment"  = "terraform"
          + "type"        = "internal"
        }
      + tags_all              = {
          + "Environment" = "internal"
          + "Name"        = "terraform-eks"
          + "deployment"  = "terraform"
          + "type"        = "internal"
        }
      + unique_id             = (known after apply)

      + inline_policy {
          + name   = (known after apply)
          + policy = (known after apply)
        }
    }

  # module.eks.module.eks_managed_node_group["uno"].aws_iam_role_policy_attachment.this["arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"] will be created
  + resource "aws_iam_role_policy_attachment" "this" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      + role       = (known after apply)
    }

  # module.eks.module.eks_managed_node_group["uno"].aws_iam_role_policy_attachment.this["arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"] will be created
  + resource "aws_iam_role_policy_attachment" "this" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
      + role       = (known after apply)
    }

  # module.eks.module.eks_managed_node_group["uno"].aws_iam_role_policy_attachment.this["arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"] will be created
  + resource "aws_iam_role_policy_attachment" "this" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
      + role       = (known after apply)
    }

  # module.eks.module.eks_managed_node_group["uno"].aws_security_group.this[0] will be created
  + resource "aws_security_group" "this" {
      + arn                    = (known after apply)
      + description            = "EKS managed node group security group"
      + egress                 = (known after apply)
      + id                     = (known after apply)
      + ingress                = (known after apply)
      + name                   = (known after apply)
      + name_prefix            = "uno-eks-node-group-"
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Environment" = "internal"
          + "Name"        = "uno-eks-node-group"
          + "deployment"  = "terraform"
          + "type"        = "internal"
        }
      + tags_all               = {
          + "Environment" = "internal"
          + "Name"        = "uno-eks-node-group"
          + "deployment"  = "terraform"
          + "type"        = "internal"
        }
      + vpc_id                 = (known after apply)
    }

Plan: 54 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + rds_endpoint = (known after apply)
  + vpc_id       = (known after apply)
╷
│ Warning: Redundant ignore_changes element
│ 
│   on .terraform/modules/db/modules/db_instance/main.tf line 26, in resource "aws_db_instance" "this":
│   26: resource "aws_db_instance" "this" {
│ 
│ Adding an attribute name to ignore_changes tells Terraform to ignore future changes to the argument in configuration after the object has been created, retaining
│ the value originally configured.
│ 
│ The attribute latest_restorable_time is decided by the provider alone and therefore there can be no configured value to compare with. Including this attribute in
│ ignore_changes has no effect. Remove the attribute from ignore_changes to quiet this warning.
╵

Do you want to perform these actions in workspace "terraform"?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

module.db.module.db_parameter_group.aws_db_parameter_group.this[0]: Creating...
module.eks.aws_cloudwatch_log_group.this[0]: Creating...
module.eks.module.eks_managed_node_group["uno"].aws_iam_role.this[0]: Creating...
module.vpc.aws_vpc.this[0]: Creating...
module.eks.aws_cloudwatch_log_group.this[0]: Creation complete after 1s [id=/aws/eks/terraform-eks-cluster/cluster]
module.eks.aws_iam_role.this[0]: Creating...
module.db.module.db_parameter_group.aws_db_parameter_group.this[0]: Creation complete after 2s [id=terraform-eks-postgres11-ssl-20220808225029229100000001]
module.eks.module.eks_managed_node_group["uno"].aws_iam_role.this[0]: Creation complete after 3s [id=uno-eks-node-group-20220808225029230600000002]
module.eks.module.eks_managed_node_group["uno"].aws_iam_role_policy_attachment.this["arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"]: Creating...
module.eks.module.eks_managed_node_group["uno"].aws_iam_role_policy_attachment.this["arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"]: Creating...
module.eks.module.eks_managed_node_group["uno"].aws_iam_role_policy_attachment.this["arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"]: Creating...
module.eks.module.eks_managed_node_group["uno"].aws_iam_role_policy_attachment.this["arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"]: Creation complete after 1s [id=uno-eks-node-group-20220808225029230600000002-20220808225032179100000004]
module.eks.module.eks_managed_node_group["uno"].aws_iam_role_policy_attachment.this["arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"]: Creation complete after 1s [id=uno-eks-node-group-20220808225029230600000002-20220808225032208800000005]
module.eks.aws_iam_role.this[0]: Creation complete after 3s [id=terraform-eks-cluster-cluster-20220808225029581500000003]
module.eks.module.eks_managed_node_group["uno"].aws_iam_role_policy_attachment.this["arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"]: Creation complete after 1s [id=uno-eks-node-group-20220808225029230600000002-20220808225032481700000006]
module.eks.aws_iam_role_policy_attachment.this["arn:aws:iam::aws:policy/AmazonEKSVPCResourceController"]: Creating...
module.eks.aws_iam_role_policy_attachment.this["arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"]: Creating...
module.eks.aws_iam_role_policy_attachment.this["arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"]: Creation complete after 1s [id=terraform-eks-cluster-cluster-20220808225029581500000003-20220808225033322600000008]
module.eks.aws_iam_role_policy_attachment.this["arn:aws:iam::aws:policy/AmazonEKSVPCResourceController"]: Creation complete after 1s [id=terraform-eks-cluster-cluster-20220808225029581500000003-20220808225033320700000007]
module.vpc.aws_vpc.this[0]: Still creating... [10s elapsed]
module.vpc.aws_vpc.this[0]: Creation complete after 12s [id=vpc-079e45f5ec8cb0213]
module.vpc.aws_internet_gateway.this[0]: Creating...
module.vpc.aws_route_table.private[0]: Creating...
module.vpc.aws_subnet.database[0]: Creating...
module.vpc.aws_subnet.database[1]: Creating...
module.vpc.aws_subnet.public[1]: Creating...
module.vpc.aws_subnet.public[0]: Creating...
module.vpc.aws_route_table.private[1]: Creating...
module.vpc.aws_route_table.public[0]: Creating...
aws_security_group.eks: Creating...
aws_security_group.eks-nodes: Creating...
module.vpc.aws_internet_gateway.this[0]: Creation complete after 0s [id=igw-010050badb61e203c]
module.vpc.aws_route_table.public[0]: Creation complete after 0s [id=rtb-0bbc5d4079e5b1a89]
aws_security_group.rds: Creating...
module.vpc.aws_route.public_internet_gateway[0]: Creating...
module.vpc.aws_route_table.private[0]: Creation complete after 0s [id=rtb-0a3e5bf34842dadcb]
module.vpc.aws_route_table.private[1]: Creation complete after 0s [id=rtb-03a39c236710a84a3]
module.eks.aws_security_group.node[0]: Creating...
module.eks.aws_security_group.cluster[0]: Creating...
module.vpc.aws_subnet.database[0]: Creation complete after 0s [id=subnet-067b69e280ce46ea2]
module.eks.module.eks_managed_node_group["uno"].aws_security_group.this[0]: Creating...
module.vpc.aws_subnet.database[1]: Creation complete after 0s [id=subnet-02c77ebd1291adc7a]
module.vpc.aws_route_table_association.database[0]: Creating...
module.vpc.aws_route_table_association.database[0]: Creation complete after 1s [id=rtbassoc-0e5d39768b4220532]
module.vpc.aws_route_table_association.database[1]: Creating...
module.vpc.aws_route.public_internet_gateway[0]: Creation complete after 1s [id=r-rtb-0bbc5d4079e5b1a891080289494]
module.vpc.aws_db_subnet_group.database[0]: Creating...
module.vpc.aws_route_table_association.database[1]: Creation complete after 0s [id=rtbassoc-01265ff1ce6551c67]
module.db.module.db_subnet_group.aws_db_subnet_group.this[0]: Creating...
aws_security_group.eks-nodes: Creation complete after 2s [id=sg-005716d41c20a124c]
aws_security_group.eks: Creation complete after 2s [id=sg-037c05a481f760023]
module.eks.module.eks_managed_node_group["uno"].aws_security_group.this[0]: Creation complete after 2s [id=sg-05c8a9dcb24ee6d4f]
module.eks.aws_security_group.node[0]: Creation complete after 2s [id=sg-0d0980699171f7267]
module.eks.aws_security_group.cluster[0]: Creation complete after 2s [id=sg-0e976c42d4e5fb9c0]
module.eks.aws_security_group_rule.cluster["egress_nodes_443"]: Creating...
module.eks.aws_security_group_rule.cluster["egress_nodes_kubelet"]: Creating...
module.eks.aws_security_group_rule.node["egress_self_coredns_udp"]: Creating...
module.eks.aws_security_group_rule.node["egress_ntp_udp"]: Creating...
module.eks.aws_security_group_rule.cluster["ingress_nodes_443"]: Creating...
module.vpc.aws_db_subnet_group.database[0]: Creation complete after 1s [id=terraform-eks-vpc]
module.eks.aws_security_group_rule.node["egress_self_coredns_tcp"]: Creating...
module.db.module.db_subnet_group.aws_db_subnet_group.this[0]: Creation complete after 1s [id=terraform-eks-rds-subnets-2022080822504190080000000c]
module.eks.aws_security_group_rule.node["egress_ntp_tcp"]: Creating...
aws_security_group.rds: Creation complete after 2s [id=sg-0b9de4fc672b6b303]
module.eks.aws_security_group_rule.node["ingress_cluster_kubelet"]: Creating...
module.eks.aws_security_group_rule.cluster["egress_nodes_443"]: Creation complete after 0s [id=sgrule-634949420]
module.eks.aws_security_group_rule.node["ingress_self_coredns_udp"]: Creating...
module.eks.aws_security_group_rule.node["egress_self_coredns_udp"]: Creation complete after 0s [id=sgrule-3291403120]
module.eks.aws_security_group_rule.node["egress_https"]: Creating...
module.eks.aws_security_group_rule.cluster["ingress_nodes_443"]: Creation complete after 1s [id=sgrule-96710391]
module.eks.aws_security_group_rule.node["ingress_self_coredns_tcp"]: Creating...
module.eks.aws_security_group_rule.node["egress_ntp_udp"]: Creation complete after 1s [id=sgrule-2297895170]
module.eks.aws_security_group_rule.node["egress_cluster_443"]: Creating...
module.eks.aws_security_group_rule.cluster["egress_nodes_kubelet"]: Creation complete after 1s [id=sgrule-2855794440]
module.eks.aws_security_group_rule.node["ingress_cluster_443"]: Creating...
module.eks.aws_security_group_rule.node["egress_self_coredns_tcp"]: Creation complete after 1s [id=sgrule-1246318870]
module.db.module.db_instance.aws_db_instance.this[0]: Creating...
module.eks.aws_security_group_rule.node["egress_ntp_tcp"]: Creation complete after 1s [id=sgrule-4134091791]
module.eks.aws_security_group_rule.node["ingress_cluster_kubelet"]: Creation complete after 2s [id=sgrule-3626249775]
module.eks.aws_security_group_rule.node["ingress_self_coredns_udp"]: Creation complete after 2s [id=sgrule-1744782708]
module.eks.aws_security_group_rule.node["egress_https"]: Creation complete after 3s [id=sgrule-699859217]
module.eks.aws_security_group_rule.node["ingress_self_coredns_tcp"]: Creation complete after 2s [id=sgrule-3282101915]
module.eks.aws_security_group_rule.node["egress_cluster_443"]: Creation complete after 3s [id=sgrule-678891401]
module.eks.aws_security_group_rule.node["ingress_cluster_443"]: Creation complete after 3s [id=sgrule-1738921241]
module.vpc.aws_subnet.public[1]: Still creating... [10s elapsed]
module.vpc.aws_subnet.public[0]: Still creating... [10s elapsed]
module.vpc.aws_subnet.public[0]: Creation complete after 10s [id=subnet-0a88c275fc9bf8c95]
module.vpc.aws_subnet.public[1]: Creation complete after 10s [id=subnet-01d9b992fd462fb57]
module.vpc.aws_route_table_association.public[1]: Creating...
module.vpc.aws_route_table_association.public[0]: Creating...
module.eks.aws_eks_cluster.this[0]: Creating...
module.vpc.aws_route_table_association.public[1]: Creation complete after 1s [id=rtbassoc-0d7e5e211ed24d9d0]
module.vpc.aws_route_table_association.public[0]: Creation complete after 1s [id=rtbassoc-02c18a21cce89258d]
module.db.module.db_instance.aws_db_instance.this[0]: Still creating... [10s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [10s elapsed]
module.db.module.db_instance.aws_db_instance.this[0]: Still creating... [20s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [21s elapsed]
module.db.module.db_instance.aws_db_instance.this[0]: Still creating... [30s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [31s elapsed]
module.db.module.db_instance.aws_db_instance.this[0]: Still creating... [40s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [41s elapsed]
module.db.module.db_instance.aws_db_instance.this[0]: Still creating... [50s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [51s elapsed]
module.db.module.db_instance.aws_db_instance.this[0]: Still creating... [1m0s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [1m1s elapsed]
module.db.module.db_instance.aws_db_instance.this[0]: Still creating... [1m10s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [1m11s elapsed]
module.db.module.db_instance.aws_db_instance.this[0]: Still creating... [1m20s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [1m21s elapsed]
module.db.module.db_instance.aws_db_instance.this[0]: Still creating... [1m30s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [1m31s elapsed]
module.db.module.db_instance.aws_db_instance.this[0]: Still creating... [1m40s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [1m41s elapsed]
module.db.module.db_instance.aws_db_instance.this[0]: Still creating... [1m50s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [1m51s elapsed]
module.db.module.db_instance.aws_db_instance.this[0]: Still creating... [2m0s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [2m1s elapsed]
module.db.module.db_instance.aws_db_instance.this[0]: Still creating... [2m10s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [2m11s elapsed]
module.db.module.db_instance.aws_db_instance.this[0]: Still creating... [2m20s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [2m21s elapsed]
module.db.module.db_instance.aws_db_instance.this[0]: Still creating... [2m30s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [2m31s elapsed]
module.db.module.db_instance.aws_db_instance.this[0]: Still creating... [2m40s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [2m41s elapsed]
module.db.module.db_instance.aws_db_instance.this[0]: Still creating... [2m50s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [2m51s elapsed]
module.db.module.db_instance.aws_db_instance.this[0]: Still creating... [3m0s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [3m1s elapsed]
module.db.module.db_instance.aws_db_instance.this[0]: Still creating... [3m10s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [3m11s elapsed]
module.db.module.db_instance.aws_db_instance.this[0]: Still creating... [3m20s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [3m21s elapsed]
module.db.module.db_instance.aws_db_instance.this[0]: Still creating... [3m30s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [3m31s elapsed]
module.db.module.db_instance.aws_db_instance.this[0]: Still creating... [3m40s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [3m41s elapsed]
module.db.module.db_instance.aws_db_instance.this[0]: Still creating... [3m50s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [3m51s elapsed]
module.db.module.db_instance.aws_db_instance.this[0]: Still creating... [4m0s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [4m1s elapsed]
module.db.module.db_instance.aws_db_instance.this[0]: Still creating... [4m10s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [4m11s elapsed]
module.db.module.db_instance.aws_db_instance.this[0]: Still creating... [4m20s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [4m21s elapsed]
module.db.module.db_instance.aws_db_instance.this[0]: Still creating... [4m30s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [4m31s elapsed]
module.db.module.db_instance.aws_db_instance.this[0]: Still creating... [4m40s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [4m41s elapsed]
module.db.module.db_instance.aws_db_instance.this[0]: Still creating... [4m50s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [4m51s elapsed]
module.db.module.db_instance.aws_db_instance.this[0]: Still creating... [5m0s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [5m1s elapsed]
module.db.module.db_instance.aws_db_instance.this[0]: Still creating... [5m10s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [5m11s elapsed]
module.db.module.db_instance.aws_db_instance.this[0]: Still creating... [5m20s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [5m21s elapsed]
module.db.module.db_instance.aws_db_instance.this[0]: Still creating... [5m30s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [5m31s elapsed]
module.db.module.db_instance.aws_db_instance.this[0]: Still creating... [5m40s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [5m41s elapsed]
module.db.module.db_instance.aws_db_instance.this[0]: Still creating... [5m50s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [5m51s elapsed]
module.db.module.db_instance.aws_db_instance.this[0]: Still creating... [6m0s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [6m1s elapsed]
module.db.module.db_instance.aws_db_instance.this[0]: Still creating... [6m10s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [6m11s elapsed]
module.db.module.db_instance.aws_db_instance.this[0]: Still creating... [6m20s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [6m21s elapsed]
module.db.module.db_instance.aws_db_instance.this[0]: Still creating... [6m30s elapsed]
module.db.module.db_instance.aws_db_instance.this[0]: Creation complete after 6m37s [id=iii-k8s-terraform-eks-rds]
module.eks.aws_eks_cluster.this[0]: Still creating... [6m31s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [6m41s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [6m51s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [7m1s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [7m11s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [7m21s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [7m31s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [7m41s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [7m51s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [8m1s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [8m11s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [8m21s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [8m31s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [8m41s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [8m51s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [9m1s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [9m11s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [9m21s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [9m31s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [9m41s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [9m51s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [10m1s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [10m11s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [10m21s elapsed]
module.eks.aws_eks_cluster.this[0]: Still creating... [10m31s elapsed]
module.eks.aws_eks_cluster.this[0]: Creation complete after 10m35s [id=terraform-eks-cluster]
module.eks.data.tls_certificate.this[0]: Reading...
module.eks.aws_ec2_tag.cluster_primary_security_group["type"]: Creating...
module.eks.aws_ec2_tag.cluster_primary_security_group["deployment"]: Creating...
module.eks.aws_ec2_tag.cluster_primary_security_group["Environment"]: Creating...
module.eks.module.eks_managed_node_group["uno"].aws_eks_node_group.this[0]: Creating...
module.eks.data.tls_certificate.this[0]: Read complete after 0s [id=46adad793ade1fb181af4d4f685addbc37aa907c]
module.eks.aws_iam_openid_connect_provider.oidc_provider[0]: Creating...
module.eks.aws_ec2_tag.cluster_primary_security_group["type"]: Creation complete after 0s [id=sg-0b3742be09ed6d3d4,type]
module.eks.aws_ec2_tag.cluster_primary_security_group["Environment"]: Creation complete after 0s [id=sg-0b3742be09ed6d3d4,Environment]
module.eks.aws_ec2_tag.cluster_primary_security_group["deployment"]: Creation complete after 0s [id=sg-0b3742be09ed6d3d4,deployment]
module.eks.aws_iam_openid_connect_provider.oidc_provider[0]: Creation complete after 1s [id=arn:aws:iam::154977180039:oidc-provider/oidc.eks.ap-southeast-2.amazonaws.com/id/5F63EC8F338153D171ED5A2C1DEFFF65]
module.eks.module.eks_managed_node_group["uno"].aws_eks_node_group.this[0]: Still creating... [10s elapsed]
module.eks.module.eks_managed_node_group["uno"].aws_eks_node_group.this[0]: Still creating... [20s elapsed]
module.eks.module.eks_managed_node_group["uno"].aws_eks_node_group.this[0]: Still creating... [30s elapsed]
module.eks.module.eks_managed_node_group["uno"].aws_eks_node_group.this[0]: Still creating... [40s elapsed]
module.eks.module.eks_managed_node_group["uno"].aws_eks_node_group.this[0]: Still creating... [50s elapsed]
module.eks.module.eks_managed_node_group["uno"].aws_eks_node_group.this[0]: Still creating... [1m0s elapsed]
module.eks.module.eks_managed_node_group["uno"].aws_eks_node_group.this[0]: Still creating... [1m10s elapsed]
module.eks.module.eks_managed_node_group["uno"].aws_eks_node_group.this[0]: Still creating... [1m20s elapsed]
module.eks.module.eks_managed_node_group["uno"].aws_eks_node_group.this[0]: Still creating... [1m30s elapsed]
module.eks.module.eks_managed_node_group["uno"].aws_eks_node_group.this[0]: Still creating... [1m40s elapsed]
module.eks.module.eks_managed_node_group["uno"].aws_eks_node_group.this[0]: Still creating... [1m50s elapsed]
module.eks.module.eks_managed_node_group["uno"].aws_eks_node_group.this[0]: Still creating... [2m0s elapsed]
module.eks.module.eks_managed_node_group["uno"].aws_eks_node_group.this[0]: Still creating... [2m10s elapsed]
module.eks.module.eks_managed_node_group["uno"].aws_eks_node_group.this[0]: Still creating... [2m20s elapsed]
module.eks.module.eks_managed_node_group["uno"].aws_eks_node_group.this[0]: Creation complete after 2m30s [id=terraform-eks-cluster:uno-2022080823012569310000000d]
module.eks.aws_eks_addon.this["coredns"]: Creating...
module.eks.aws_eks_addon.this["kube-proxy"]: Creating...
module.eks.aws_eks_addon.this["vpc-cni"]: Creating...
module.eks.aws_eks_addon.this["kube-proxy"]: Creation complete after 2s [id=terraform-eks-cluster:kube-proxy]
module.eks.aws_eks_addon.this["coredns"]: Still creating... [10s elapsed]
module.eks.aws_eks_addon.this["vpc-cni"]: Still creating... [10s elapsed]
module.eks.aws_eks_addon.this["coredns"]: Creation complete after 14s [id=terraform-eks-cluster:coredns]
module.eks.aws_eks_addon.this["vpc-cni"]: Still creating... [20s elapsed]
module.eks.aws_eks_addon.this["vpc-cni"]: Still creating... [30s elapsed]
module.eks.aws_eks_addon.this["vpc-cni"]: Creation complete after 34s [id=terraform-eks-cluster:vpc-cni]

Apply complete! Resources: 54 added, 0 changed, 0 destroyed.

Outputs:

rds_endpoint = "iii-k8s-terraform-eks-rds.cgx0z9jpuefm.ap-southeast-2.rds.amazonaws.com"
vpc_id = "vpc-079e45f5ec8cb0213"